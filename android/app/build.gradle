apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

// NOTE: This isn't working at the moment. As a workaround, we'll set the
// ENVFILE environment variable instead.
// https://github.com/luggit/react-native-config/issues/616#issuecomment-947623280
// project.ext.envConfigFiles = [
//     debug: ".env.debug",
//     releaseStaging: ".env.staging",
//     release: ".env.release",
// ]

project.ext.react = [
    enableHermes: true, // clean and rebuild if changed
    bundleInRelease: true, // Bundle JS and assets in release mode
    bundleInReleaseStaging: true, // Bundle JS and assets in staging mode
    devDisabledInReleaseStaging: true, // Disable dev-mode in staging mode
]

// Name of the font files you want to copy
project.ext.vectoricons = [
    iconFontNames: [
        'Ionicons.ttf',
        'MaterialIcons.ttf',
        'MaterialCommunityIcons.ttf'
    ]
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", true);

def versionMajor = 3 // Can be more than 2 digits
def versionMinor = 3 // Must be between 0 and 99
def versionPatch = 0 // Must be between 0 and 99
def versionBuild = 0 // Must be between 0 and 99

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.discovrr.discovrr_app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 10**6 + versionMinor * 10**4 + versionPatch * 10**2 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        resValue "string", "build_config_package", "com.discovrr.discovrr_app"
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('DISCOVRR_UPLOAD_STORE_FILE')) {
                storeFile file(DISCOVRR_UPLOAD_STORE_FILE)
                storePassword DISCOVRR_UPLOAD_STORE_PASSWORD
                keyAlias DISCOVRR_UPLOAD_KEY_ALIAS
                keyPassword DISCOVRR_UPLOAD_KEY_PASSWORD
            }
        }

        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            resValue "string", "CodePushDeploymentKey", '""'
            // resValue "string", "fbProviderId", "com.facebook.app.FacebookContentProvider759877634893854"
        }

        // This should be named "releaseStaging" as that naming convention is significant for CodePush
        releaseStaging {
            initWith release
            matchingFallbacks = ['release']

            applicationIdSuffix ".releaseStaging"
            signingConfig signingConfigs.release
            resValue "string", "CodePushDeploymentKey", '"pjAas8K6vagmVLbl2HIUQ1eK7L1_GtpZX4VR6"'
            // resValue "string", "fbProviderId", "com.facebook.app.FacebookContentProvider{**enjaga**}"

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            resValue "string", "CodePushDeploymentKey", '"bRj21JE4-Rigvx4QKt2OEWkutNH-G6mJZ8Jta"'
            // resValue "string", "fbProviderId", "com.facebook.app.FacebookContentProvider691371558227281"

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }

    packagingOptions {
        pickFirst '**/*.so'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+" // From node_modules

    // For animated GIF support
    // NOTE: I had to manually downgraded this from 2.5.0 to 2.2.0 because of a
    // runtime error that occurs when Android tries to initialise Fresco.
    implementation 'com.facebook.fresco:animated-gif:2.2.0'

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    implementation "androidx.core:core-splashscreen:1.0.0-alpha02"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
        releaseStagingImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation 'com.android.support:multidex:1.0.3'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

task switchToDebug(type: Copy) {
    description = 'Switches to DEBUG google-services.json'
    from "src/debug"
    include "google-services.json"
    into "."
}

task switchToRelease(type: Copy) {
    description = 'Switches to RELEASE google-services.json'
    from "src/main"
    include "google-services.json"
    into "."
}

afterEvaluate {
    processDebugGoogleServices.dependsOn switchToDebug
    processReleaseGoogleServices.dependsOn switchToRelease
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
